s <- available.packages()
View(s)
install.packages("swirl")
install.packages("KernSmooth")
library(KernSmooth)
search()
clear
library(swirl)
Swirl()
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create(old.dir(testdir))
dir.create()
dir.create(path = old.dir)
?dir.create
dir.create(path = old.dir, testdir)
dir.create()
testdir <- dir.create(path - old.dir)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exsits()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.r","mytest3.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
file.path("folder1", "folder2")
?dir.create
create.dir("testdir2")
dir.create("testdir2", filepath("testdir2"))
getwd()
info()
?file.path
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
?dir.create
unlink('testdir2', recursive = TRUE)
setwd(old.dir)
unlink('testdir', recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
my_seq
deq(along.with = my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each=10)
?rep
swirl()
library(swirl)
swirl()
exit
quit
swirl()
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Tyler")
my_name <- c(my_char, "Tyler")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X","Y","Z", sep = " "))
paste(1:3, c("X","Y","Z"), sep= " ")
paste(1:3, c("X","Y","Z"), sep= "")
LETTERS
paste(LETTERS, 1:4, sep="-")
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
y
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my.data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x> 0]
x[C(3,5,7)]
x
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[c(-2,10)]
x[c(-2, 10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar= 2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
?rpois
rpois(5,2)
rep(0.1, each=5)
x <- rep(0.1, each=5)
y <- rnorm(10, 0, 20)
z <- 0.5 + 2*x + y
z
plot(x,z)
set.seed(1)
rpoit(5,2)
rpois(5,2)
setwd("C:/Users/tymel_000/Repos/GetCleanData")
setwd("UCI HAR Dataset")
xtest <- read.table("test/X_test.txt")
ytext <- read.table("test/y_text.txt")
ytext <- read.table("test/y_test.txt")
rm(ytext)
source('//tyler/Users/tymel_000/Repos/GetCleanData/run_analysis.R')
data(mtcars)
mtcars
library(reshape2)
narrow <- mtcars[, c("cyl", "gear", "vs", "mpg")]
narrow
wide1 <- tidied <- dcast(narrow, cyl + gear ~ vs, max)
wide1
wide2 <- tidied <- dcast(narrow, cyl + vs ~ gear, max)
wide2
wide3 <- tidied <- dcast(narrow, gear + vs ~ cyl, max)
wide3
notverywide <- aggregate(mpg ~ gear + vs + cyl, data = narrow, max)
notverywdie
notverywide
untidy <- with(narrow, tapply(mpg, list(cyl, vs, gear), max))
untidy
rm(list= ls())
source('//tyler/Users/tymel_000/Repos/GetCleanData/run_analysis.R')
library(dplyr)
mergedtest <- merge(xtest, subtest)
View(mergedtest)
View(subtest)
subtest <- rename(subtest, ID = V1)
mergedtest <- merge(xtest, subtest, by="ID")
mergedtest <- merge(xtest, subtest, by.y = "ID")
mergedtest <- cbind(xtest, subtest)
View(mergedtest)
mergedtest$ID
head(mergedtest)
mergedtest <- arrange(mergedtest, ID)
View(mergedtest)
grouped <- group_by(mergedtest, ID)
View(grouped)
mergedtest <- mergedtext[,ID,2:ncol(mergedtest)]
mergedtest <- mergedtest[,ID,2:ncol(mergedtest)]
mergedtest <- mergedtest[,c(ID,2:ncol(mergedtest))]
mergedtest <- mergedtest[,c(mergedtest$ID,2:ncol(mergedtest))]
View(mergedtest)
mergedtest <- merge(xtest, subtest, by.y = "ID")
mergedtest <- cbind(xtest, subtest)
mergedtest <- cbind(subtest, xtest)
View(mergedtest)
ytest <- rename(ytest, Activity = V1)
View(ytrain)
View(ytest)
mergedtest <- cbind(subtest, ytest, xtest)
View(mergedtest)
?grep
View(grouped)
rm(grouped)
mergedtrain <- cbind(subtrain, ytrain, xtrain)
View(mergedtest)
train.test <- rbind(mergedtrain,mergedtest)
traintest <- rbind(mergedtrain,mergedtest)
mergedtrain <- rename(mergedtrain, Activity = V2, ID = V1)
ytrain <- rename(ytrain, Activity = V1)
subtrain <- rename(subtrain, ID = V1)
mergedtrain <- cbind(subtrain, ytrain, xtrain)
both <- rbind(mergedtrain, mergedtest)
View(both)
class(both$ID)
activity <- read.table("activity_labels.txt")
View(activity)
?read.table
ytest <- read.table("test/y_test.txt", col.names = "Activity")
View(ytest)
source('//tyler/Users/tymel_000/Repos/GetCleanData/run_analysis.R')
View(mergedtest)
source('//tyler/Users/tymel_000/Repos/GetCleanData/run_analysis.R')
?sub
length(activity)
nrow(activity)
temp <- sub(activity[1,2], both$Activity)
temp <- sub(1, activity[1,2], both$Activity)
temp[,2]
temp
for(i in nrow(activity)){
both <- sub(i, activity[i,2], both$Activity)
}
both <- rbind(mergedtest, mergedtrain)
for(i in nrow(activity)){
both <- sub(i, activity[i,2], both$Activity)
}
both <- rbind(mergedtest, mergedtrain)
activity <- read.table("activity_labels.txt")
for(i in nrow(activity)){
both$Activity <- sub(i, activity[i,2], both$Activity)
}
View(both)
temp <- sub(1, activity[1,2], both$Activity)
str(both)
head(both$Activity, n=1000)
for(i in nrow(activity)){
both$Activity <- gsub(i, activity[i,2], both$Activity)
}
View(both)
class(activity)
class(activity$V2)
activity <- read.table("activity_labels.txt", stringsasFactors=FALSE)
for(i in nrow(activity)){
both$Activity <- gsub(i, activity[i,2], both$Activity)
}
?read.table
activity <- read.table("activity_labels.txt", stringsAsFactors=FALSE)
for(i in nrow(activity)){
both$Activity <- gsub(i, activity[i,2], both$Activity)
}
class(activity$V2)
View(both)
gsub(1, activity[1,2], both$Activity)
View(both)
both <- rbind(mergedtest, mergedtrain)
both$Activity <- gsub(1, activity[1,2], both$Activity)
View(both)
both$Activity <- gsub(2, activity[2,2], both$Activity)
both$Activity
seq_along(activity)
seq_len(activity)
seq_along(activity$V2)
both <- rbind(mergedtest, mergedtrain)
activity <- read.table("activity_labels.txt", stringsAsFactors=FALSE)
for(i in seq_along(activity$V2)){
both$Activity <- gsub(i, activity[i,2], both$Activity)
}
both$Activity
features <- read.table("features.txt", stringsAsFactors=FALSE)
View(features)
class(features$Vs)
class(features$V2)
?grep
View(features)
grep1("mean", features[1,2])
grepl("mean", features[1,2])
grep("mean", features[1,2])
colnames[,1]
?colnames
colnames(features)
colnames(both)
colnames(both[,3]) <- mean
?rename
temps <- select(features, contains("mean") | contains("std"))
temps <- select(features, contains("mean"))
temps
View(temps)
rm(temps)
select(features$V2, contains("mean"))
View(features)
View(features)
?colnames
View(features)
View(activity)
activity[,1] <- "activity"
colnames(activity[,1]) <- "activity"
colnames(activity[1,1]) <- "activity"
colnames(activity) <- "activity"
colnames(activity)
colnames(activity)[2] <- "V2"
features$V2[1]
features$V2[2]
i <- 3
i<- 2
colnames(both)[i+2] <- features$V2[i]
features <- read.table("features.txt", stringsAsFactors=FALSE)
for(i in seq_along(features$V2)){ #Only saving the mean and std columns
if(grepl("mean" | "std", features[i,2])==TRUE){
colnames(both)[i+2] <- features$V2[i]
}
for(i in seq_along(features$V2)){ #Only saving the mean and std columns
if(grepl("mean" | "std", features[i,2])==TRUE){
colnames(both)[i+2] <- features$V2[i]
}
for(i in seq_along(features$V2)){ #Only saving the mean and std columns
if(grepl("mean", features[i,2])==TRUE){
colnames(both)[i+2] <- features$V2[i]
}
for(i in seq_along(features$V2)){ #Only saving the mean and std columns
if(grepl("mean", features[i,2])==TRUE){
colnames(both)[i+2] <- features$V2[i]
}
else{
both[,i] <- NULL
}
for(i in seq_along(features$V2)){ #Only saving the mean and std columns
if(grepl("mean", features[i,2])==TRUE){
colnames(both)[i+2] <- features$V2[i]
}
else{
both[,i] <- NULL
}
}
for(i in seq_along(features$V2)){ #Only saving the mean and std columns
if(grepl("mean", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else{
both[,i] <- NULL
}
}
both <- rbind(mergedtest, mergedtrain)
for(i in seq_along(features$V2)){ #Only saving the mean and std columns
if(grepl("mean", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else if(grepl("std", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else{
both[,i] <- NULL
}
}
both <- rbind(mergedtest, mergedtrain)
for(i in seq_along(features$V2)){ #Only saving the mean and std columns
if(grepl("mean()", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else if(grepl("std()", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else{
both[,i] <- NULL
}
}
both <- rbind(mergedtest, mergedtrain)
for(i in ncol(features):1){ #Only saving the mean and std columns
if(grepl("mean()", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else if(grepl("std()", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else{
both[,i] <- NULL
}
}
for(i in ncol(features):1) print i
for(i in ncol(features):1) print(i)
for(i in nrow(features):1) print(i)
for(i in nrow(features):1){ #Only saving the mean and std columns
if(grepl("mean()", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else if(grepl("std()", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else{
both[,i] <- NULL
}
}
colnames(both)
?aggregate
final <- aggregate(both[, -c(1:2)], by = list(both$ID, both$Activity), mean)
View(final)
source('//tyler/Users/tymel_000/Repos/GetCleanData/run_analysis.R')
View(final)
both <- rbind(mergedtest, mergedtrain)
activity <- read.table("activity_labels.txt", stringsAsFactors=FALSE)
for(i in seq_along(activity$V2)){ #Put the activity labels into my dataset
both$Activity <- gsub(i, activity[i,2], both$Activity)
}
features <- read.table("features.txt", stringsAsFactors=FALSE)
for(i in nrow(features):1){ #Only saving the mean and std columns
if(grepl("mean", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else if(grepl("std", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else{
both[,i] <- NULL
}
}
# And finally average out all duplicated activities by same ID
final <- aggregate(both[, -c(1:2)], by = list(both$ID="ID", both$Activity="Activity"), mean)
final <- rename(final, ID = Group.1, Activity = Group.2)
both <- rbind(mergedtest, mergedtrain)
activity <- read.table("activity_labels.txt", stringsAsFactors=FALSE)
for(i in seq_along(activity$V2)){ #Put the activity labels into my dataset
both$Activity <- gsub(i, activity[i,2], both$Activity)
}
features <- read.table("features.txt", stringsAsFactors=FALSE)
for(i in nrow(features):1){ #Only saving the mean and std columns
if(grepl("mean", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else if(grepl("std", features[i,2])){
colnames(both)[i+2] <- features$V2[i]
}
else{
both[,i] <- NULL
}
}
# And finally average out all duplicated activities by same ID
final <- aggregate(both[, -c(1:2)], by = list(both$ID, both$Activity), mean)
final <- rename(final, ID = Group.1, Activity = Group.2)
?write.table
write.table(final, "tidydata.txt")
write.table(final, "../tidydata.txt")
write.table(final, "../tidydata.txt", sep = "  ")
write.table(final, "../tidydata.txt", sep = "   ", row.names=FALSE)
class(colnames(final))
write.csv(final, "../tidydata.txt", sep = "   ", row.names=FALSE)
write.csv(final, "../tidydata.txt", row.names=FALSE)
write.csv(final, "../tidydata.csv", row.names=FALSE)
source('//tyler/Users/tymel_000/Repos/GetCleanData/run_analysis.R')
